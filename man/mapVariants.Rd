% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allGenerics.R, R/mapVariants.R
\name{mapVariants}
\alias{mapVariants}
\alias{mapVariants,gdb-method}
\title{mapVariants}
\usage{
mapVariants(
  object,
  ranges = NULL,
  gff = NULL,
  bed = NULL,
  bedCols = character(),
  fields = NULL,
  uploadName = NULL,
  output = NULL,
  sep = "\\t",
  skipIndexes = FALSE,
  overWrite = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{object}{a \code{\link{gdb}} object}

\item{ranges}{Can be 1) a data.frame, including at least 'CHROM','start', and 'end' columns.
2) a \code{\link[GenomicRanges:GRanges-class]{GenomicRanges::GRanges}} object. 3) a filepath to a ranges file containing at least 'CHROM','start', and 'end' columns.
Separator can be specified using the \code{sep} parameter (defaults to \verb{\\\\t}).}

\item{gff}{Path to a gff- or gtf-file.}

\item{bed}{Path to a bed-file. Specify extra columns using the \code{bedCols} parameter.}

\item{bedCols}{A character vector of names of the extra columns to read from the BED-file.
Optionally the vector can be a named vector to indicate the classes of the columns (i.e. c("gene_id" = "character", "gene_name"="character")).
If not named, all extra columns will be read as character columns (see examples).}

\item{fields}{Feature fields to keep. Defaults to \code{NULL} in which case all fields are kept.}

\item{uploadName}{Name of table to upload to the gdb.
If not specified, either specifiy \code{output} to
write the results to disk, or otherwise the results will be returned in the R session.}

\item{output}{Optionally, an output file path. Can be used instead of \code{uploadName} to write the results to disk.}

\item{sep}{Field separator, relevant if \code{ranges} is a filepath. Defaults to \verb{\\\\t}.}

\item{skipIndexes}{Flag indicating whether to skip indexing of imported table.
Relevant if \code{uploadName} is specified, and thus the output table is imported in the gdb.
Defaults to \code{FALSE}.}

\item{overWrite}{if \code{uploadName} is specified, should an existing table in the gdb with the same name be overwitten?
Defaults to \code{FALSE}.}

\item{verbose}{Should the method be verbose? Defaults to \code{TRUE}.}
}
\description{
Method to map the variants in a \code{\link{gdb}} to a set of ranges or features.
The input can be a set of ranges (CHROM, start, end), a bed-file or a gff/gtf-file.
Variants in the gdb will be mapped onto those ranges and annotated with the features/columns
included in the input file.
For example, variants can be easily mapped upon genomic features downloaded in gff format from ensembl.
The output can be written to disk  (\code{output} parameter) or directly uploaded to the \code{\link{gdb}} (\code{uploadName} parameter).
}
\examples{

library(rvatData)
library(rtracklayer)
library(GenomicRanges)
gdb <- create_example_gdb()

# map variants to gene models
ranges <- GRanges(
  seqnames = c("chr21", "chr4"),
  ranges = IRanges(
    start = c(31659666, 169369704),
    end = c(31668931, 169612632)
  ),
  gene_name = c("SOD1", "NEK1")
)

mapVariants(gdb,
            ranges = ranges,
            uploadName = "gene",
            verbose = FALSE)

# similarly, ranges can be a data.frame
ranges <- data.frame(
  CHROM = c("chr21", "chr4"),
  start = c(31659666, 169369704),
  end = c(31668931, 169612632),
  gene_name = c("SOD1", "NEK1")
)

mapVariants(gdb,
            ranges = ranges,
            uploadName = "gene",
            verbose = FALSE,
            overWrite = TRUE)

# often you'd want to map variants to a large set of ranges, such as ensembl models
# mapVariants supports several file formats, including gff/gtf, bed and ranges

# map variants using a gtf file
gtffile <- tempfile(fileext = ".gtf")
rtracklayer::export(makeGRangesFromDataFrame(ranges),
                    con = gtffile, 
                    format = "gtf")

mapVariants(gdb,
            gff = gtffile,
            uploadName = "gene",
            verbose = FALSE,
            overWrite = TRUE)

# map variants using a bed file

bedfile <- tempfile(fileext = ".bed")
rtracklayer::export(makeGRangesFromDataFrame(ranges),
                    con = bedfile, 
                    format = "bed")
mapVariants(gdb,
            bed = bedfile,
            uploadName = "gene",
            verbose = FALSE,
            overWrite = TRUE)

# see the variant annotation tutorial on the rvat website for more details


}
