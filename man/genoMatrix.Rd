% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allClasses.R, R/allGenerics.R, R/genoMatrix.R
\docType{class}
\name{genoMatrix}
\alias{genoMatrix}
\alias{getAF}
\alias{getMAF}
\alias{getAC}
\alias{getMAC}
\alias{getNCarriers}
\alias{getCR}
\alias{updateGT}
\alias{flipToMinor}
\alias{getCarriers}
\alias{genoMatrix-class}
\alias{show,genoMatrix-method}
\alias{getAF,genoMatrix-method}
\alias{getMAF,genoMatrix-method}
\alias{getAC,genoMatrix-method}
\alias{getMAC,genoMatrix-method}
\alias{getNCarriers,genoMatrix-method}
\alias{getCR,genoMatrix-method}
\alias{summariseGeno,genoMatrix-method}
\alias{[,genoMatrix,ANY,ANY,ANY-method}
\alias{updateGT,genoMatrix-method}
\alias{flipToMinor,genoMatrix-method}
\alias{recode,genoMatrix-method}
\alias{aggregate,genoMatrix-method}
\alias{getCarriers,genoMatrix-method}
\title{The genoMatrix class for storing genotype data and associated sample and variant info.}
\description{
The genoMatrix class is specifically designed to represent genotype data and associated sample and variant info.
It extends the Bioconductor \code{\link[SummarizedExperiment]{SummarizedExperiment}} class to accommodate genotype data.
}
\section{Construct a genoMatrix}{

\code{getGT()}: Construct a genoMatrix, see \code{\link[=getGT]{getGT()}} for details.
}

\section{Accessors}{

The accessors are fully described in \code{\link[SummarizedExperiment:SummarizedExperiment-class]{SummarizedExperiment::SummarizedExperiment}}, and
include \code{assays(x)}, \code{rowData(x)}, \code{colData(x)}, \code{metadata(x)}, \code{dim(x)}, \code{nrow(x)}, \code{ncol(x)}, \code{colnames(x)} and \code{rownames(x)}.
}

\section{Getters}{

In the following code snippets, x is a genoMatrix object
\itemize{
\item \code{getAF(x)}: Returns alternate allele frequencies. These will be equal to the minor allele frequences after applying \code{flipToMinor()}.
\item \code{getMAF(x)}: Returns variant minor allele frequencies.
\item \code{getAC(x)}: Returns alternate allele counts.  These will be equal to the minor allele counts after applying \code{flipToMinor()}.
\item \code{getMAC(x)}: Returns minor allele counts.
\item \code{getCR(x, var=TRUE)}: Returns call-rates for variants or samples.
\code{var=TRUE} by default, set to \code{FALSE} to return sample call-rates.
\item \code{getNCarriers(x)}: Returns number of carriers of the alternate allele for each variant.
Note that when geneticModel = 'recessive' it will return the number of homozygous carriers.
\item \code{summariseGeno(x)}: Returns a per variant summary of genotype counts and hwe testing.
\item \code{getCarriers(x, VAR_id=NULL,colDataFields=NULL,rowDataFields=NULL,groupBy=NULL)}:
Return sample IDs for carriers of each of the variants in the genoMatrix.
\code{VAR_id} can be specified to return for the specified subset of variants.
\code{colDataFields} and \code{rowDataFields} can be specified include additional fields from \code{colData(x)} or \code{rowData(x)} in the output.
The \code{groupBy} parameter can be set to calculate carrier frequency among groups (such as cohort or phenotype), multiple groups can be set.
The \code{aggregate} parameter can be set to TRUE to return mean burden scores among the groupings.
}

note: Variant ploidy (diploid, XnonPAR, YnonPAR) are handled according to sample sex.
Samples for which sex are not provided are excluded during AF calculation at non-diploid variants.
}

\section{Subsetting}{


Subsetting a genoMatrix object is equivalent to subsetting a SummarizedExperiment object,
and is fully described in fully described in \code{\link[SummarizedExperiment:SummarizedExperiment-class]{SummarizedExperiment::SummarizedExperiment}}.
Please see the example section for examples.
}

\section{Recode}{

In the following code snippets, x is a genoMatrix object
\itemize{
\item \code{flipToMinor(x)}: Function to flip genotype dosages such that all GT values represent minor allele counts.
\item \code{recode(x, geneticModel,imputeMethod,weights,MAFweights)}: Returns a recoded genoMatrix object, genetic model, imputation, and weights can be recoded. See \code{\link[=recode]{recode()}} for details.
\item \code{updateGT(x, SM = NULL, anno = NULL)}: Safe replacement of the colData or rowData table within a genoMatrix with a new table.
}
}

\section{Rare variant testing}{

In the following code snippets, x is a genoMatrix object
\itemize{
\item \code{aggregate()}: Returns per sample aggregate dosage for a genoMatrix object.
The genoMatrix shouldn't contain missing values, use \code{\link[=recode]{recode()}} to impute missing values.
Aggregation is dependent on \code{geneticModel}, \code{MAFweights} and \code{weights}, all can be set using the \code{\link[=recode]{recode()}} method.
By default, an updated genoMatrix is returned with an \code{aggregate} field in \code{colData}. Set \code{returnGT} to \code{FALSE} to return a vector of aggregates.
\item \code{assocTest()}: Perform aggregate (burden) and single variant assocation test. See \code{\link[=assocTest]{assocTest()}} for details.
}
}

\examples{


library(rvatData)
data(GT)

# Basic operations -------------------------------------------------------------

# retrieve rowData (i.e. variant info)
rowData(GT)

# retrieve colData (i.e. sample info)
colData(GT)

# retrieve sample IDs
samples <- colnames(GT)
head(samples)

# retrieve VAR ids
vars <- rownames(GT)
head(vars)

# check dimensions
nrow(GT)
ncol(GT)
dim(GT)

# A genoMatrix object can be subsetted similarly as a data.frame:
GT[1:5, 1:5]

# Subset samples based on sample info
GT[ ,GT$pheno == 1]

# Subset first two variants
GT[1:2,]

# Extract variant/sample summaries --------------------------------------------------

# calculate allele frequencies, allele counts etc.
af <- getAF(GT)
maf <- getMAF(GT)
ac <- getAC(GT)
mac <- getMAC(GT)
carriers <- getNCarriers(GT)

# generate call-rates
var_cr <- getCR(GT) # variant call-rates
sample_cr <- getCR(GT, var = FALSE) # sample call-rates

# generate variant summaries
varsummary <- summariseGeno(GT)

# Recode genotypes  --------------------------------------------------

# flip variants with AF > 0.5 to the minor allele
GT <- flipToMinor(GT)

# recode genotypes to domiant/recessive models
recode(GT, geneticModel = "dominant")
recode(GT, geneticModel = "recessive")
# see ?recode for details

# recode missing genotypes 
recode(GT, imputeMethod = "meanImpute")
recode(GT, imputeMethod = "missingToRef")
# see ?recode for details

# generate aggregate (burden) scores

# by default, scores will be added to the colData
aggregate(recode(GT, imputeMethod = "meanImpute"))

# set `returnGT = FALSE` to return aggregates as a vector instead
aggregate <- aggregate(recode(GT, imputeMethod = "meanImpute"), returnGT = FALSE)
head(aggregate)

# Update cohort and variant info in genoMatrix --------------------------
gdb <- gdb(rvat_example("rvatData.gdb"))
anno <- getAnno(gdb, "varInfo", fields = c("VAR_id", "CADDphred", "PolyPhen"))
updateGT(GT, anno = anno )
pheno <- colData(GT)
updateGT(GT, SM = colData(GT)[,1:4])

# Get variant carriers

# retrieve a data.frame that lists the samples carrying each respective 
# variant in the genoMatrix. Additional variant and sample info can be included
# using the `rowDataFields` and `colDataFields` respectively.
carriers <- getCarriers(
  GT,
  rowDataFields = c("REF", "ALT"),
  colDataFields = c("superPop")
)
head(carriers)

# Perform rare variant tests:

# burden test (firth)
rvb <- assocTest(
  GT,
  pheno = "pheno",
  covar = c("sex", "PC1", "PC2", "PC3", "PC4"),
  test = "firth"
)

# single variant tests
sv <- assocTest(
  GT,
  pheno = "pheno",
  covar = c("sex", "PC1", "PC2", "PC3", "PC4"),
  test = "scoreSPA",
  singlevar = TRUE
)
# see ?assocTest for details

}
\seealso{
\code{\link{assocTest}}

\code{\link{recode}}
}
\keyword{gdb}
