% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assocTest_gdb.R
\name{assocTest-gdb}
\alias{assocTest-gdb}
\alias{assocTest,gdb-method}
\title{assocTest-gdb}
\usage{
\S4method{assocTest}{gdb}(
  object,
  pheno,
  test,
  cohort = "SM",
  varSet = NULL,
  VAR_id = NULL,
  name = "none",
  continuous = FALSE,
  singlevar = FALSE,
  covar = NULL,
  offset = NULL,
  geneticModel = "allelic",
  imputeMethod = NULL,
  MAFweights = "none",
  maxitFirth = 1000,
  checkPloidy = NULL,
  keep = NULL,
  output = NULL,
  methodResampling = NULL,
  resamplingFile = NULL,
  nResampling = 1000,
  outputResampling = FALSE,
  memlimitResampling = NULL,
  minCallrateVar = 0,
  maxCallrateVar = Inf,
  minCallrateSM = 0,
  maxCallrateSM = Inf,
  minMAF = 0,
  maxMAF = 1,
  minMAC = 0,
  maxMAC = Inf,
  minCarriers = 0,
  maxCarriers = Inf,
  minCarrierFreq = 0,
  maxCarrierFreq = Inf,
  memlimit = 1000,
  verbose = TRUE,
  strict = TRUE
)
}
\arguments{
\item{object}{a \code{\link{gdb}} object}

\item{pheno}{colData field to test as response variable, the response variable
can either be binary (0/1) or continuous.
If the response variable is continuous set \code{continuous} to \code{TRUE}.
Multiple phenotypes can be specified, which will then be tested separately.}

\item{test}{Vector of statistical tests to run,
options include firth,glm,lm,nbinom,skat,skat_burden,skato,skat_fwe,skat_burden_fwe,
skato_fwe,skat_robust,skato_robust,skat_burden_robust, acatv, acatvSPA.
See \code{\link{assocTest}} for details.}

\item{cohort}{If a valid cohort name is provided, then the uploaded data for
this cohort is used to filter and annotate the genoMatrix object.
If not specified, all samples in the gdb will be loaded.}

\item{varSet}{a \code{\link{varSetFile}} or \code{\link{varSetList}} object, alternatively a vector of VAR_ids can be specified using the \code{VAR_id} parameter.}

\item{VAR_id}{a vector of VAR_ids, alternatively the \code{varSet} parameter can be specified.
If single variant tests are ran, the \code{memlimit} argument controls how many variants to analyze at a time.}

\item{name}{Optional name for the analysis, defaults to "none".}

\item{continuous}{If the response variable continuous? (TRUE/FALSE). Defaults to \code{FALSE}.}

\item{singlevar}{Run single variant tests? (TRUE/FALSE).
Defaults to \code{FALSE}, in which case aggregate tests are ran.}

\item{covar}{Character vector of covariates, or a list of character vectors of covariates in which case each covariate set will be tested separately.}

\item{offset}{Optional model offset, can be used to account for regenie LOCO predictions.}

\item{geneticModel}{Which genetic model to apply? ('allelic', 'recessive' or 'dominant').
Defaults to \code{allelic}.
Multiple geneticModels can be specified, in which case each will be analyzed separately.}

\item{imputeMethod}{Which imputation method to apply? ('meanImpute' or 'missingToRef').
Defaults to \code{meanImpute}.}

\item{MAFweights}{MAF weighting method. Currently Madsen-Browning ('mb') is implemented, by default no MAF weighting is applied.
Multiple MAFweights can be specified, in which case each will be analyzed separately.}

\item{maxitFirth}{Maximum number of iterations to use for estimating firth confidence intervals. Defaults to 1000.}

\item{checkPloidy}{Version of the human genome to use when assigning variant ploidy (diploid, XnonPAR, YnonPAR).
Accepted inputs are GRCh37, hg19, GRCh38, hg38.
If not specified, the genome build in the \code{\link{gdb}} will be used, if available (included if the \code{genomeBuild} parameter was set in \code{\link{buildGdb}}).
Otherwise, if the genome build is not included in the gdb metadata, and no value is provided, then all variants are assigned the default ploidy of "diploid"}

\item{keep}{Vector of sample IDs to keep, defaults to \code{NULL}, in which case all samples are kept.}

\item{output}{Output file path for results.
Defaults to \code{NULL}, in which case results are not written.}

\item{methodResampling}{Which method to use for resampling? ('permutation' currently implemented)
Defaults to \code{NULL}, in which case no resampling is performed.}

\item{resamplingFile}{A \code{\link{resamplingFile}} object.}

\item{nResampling}{Number of resamplings to perform if methodResampling is specified.}

\item{outputResampling}{If \code{TRUE} or a filepath, results for each resampling are returned (or saved to the filepath).
This can be useful if permutations are used to calculated to estimate correlations among genes for example.
Defaults to \code{FALSE} in which case resampling is used to calculate resampled P-values,
results for individual resamplings are not returned.}

\item{memlimitResampling}{Maximum number of resamplings to perform at a time.
Resampling generates a matrix of n x p, where n is the number of samples and p the number of resamplings
thus, for large number of resamplings it can be more efficient to split the permutations in chunks of size \code{memlimitResampling}.
Defaults to \code{NULL} in which case all permutations are performed.}

\item{minCallrateVar}{Minimum genotype rate for variant retention.}

\item{maxCallrateVar}{Maximum genotype rate for variant retention.}

\item{minCallrateSM}{Minimum genotype rate for sample retention.}

\item{maxCallrateSM}{Maximum genotype rate for sample retention.}

\item{minMAF}{Minimum minor allele frequency for variant retention.}

\item{maxMAF}{Maximum minor allele frequency for variant retention.}

\item{minMAC}{Minimum minor allele count for variant retention.}

\item{maxMAC}{Maximum minor allele count for variant retention.}

\item{minCarriers}{Minimum carrier count for variant retention.}

\item{maxCarriers}{Maximum carrier count for variant retention.}

\item{minCarrierFreq}{Minimum carrier frequency for variant retention.}

\item{maxCarrierFreq}{Maximum carrier frequency for variant retention.}

\item{memlimit}{Maximum number of variants to load at once (if \code{VAR_id} is specified).}

\item{verbose}{Should the function be verbose? (TRUE/FALSE), defaults to \code{TRUE}.}

\item{strict}{Should strict checks be performed? Defaults to \code{TRUE}. Strict tests currently includes
checking whether supplied varSetFile/varSetList was generated from the same gdb as specified in \code{object}.}
}
\description{
Run \code{\link{assocTest}} on a \code{\link{gdb}} object. See the main \code{\link{assocTest}} page for details.
}
\examples{

library(rvatData)
gdb <- create_example_gdb()
varsetfile <- varSetFile(rvat_example("rvatData_varsetfile.txt.gz"))

# for example purposes, upload a small cohort
cohort <- getCohort(gdb, "pheno")
cohort <- cohort[cohort$IID \%in\% colnames(GTsmall),]
uploadCohort(gdb, name = "phenosmall", value = cohort)

# run a firth burden test on a binary phenotype
varsetlist <- getVarSet(varsetfile, unit = c("SOD1", "NEK1"), varSetName = "High")
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = "firth",
                 name = "example")


# run ACAT-v and SKAT tests
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("acatvfirth", "skat_burden_robust", "skato_robust"),
                 name = "example")

# run a burden test on a continuous phenotype
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "age",
                 continuous = TRUE,
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("lm", "skat", "acatv"),
                 name = "example")

# run single variant tests on a binary phenotype 
sv <- assocTest(gdb,
                varSet = varsetlist,
                cohort = "phenosmall",
                pheno = "pheno",
                singlevar = TRUE,
                covar = c("PC1", "PC2", "PC3", "PC4"),
                test = c("firth", "glm", "scoreSPA"),
                name = "example",
                minCarriers = 1)

# similarly a list of VAR_ids can be specified instead of a varSetList/varSetFile
sv <- assocTest(gdb,
                VAR_id = 1:20,
                cohort = "phenosmall",
                pheno = "pheno",
                singlevar = TRUE,
                covar = c("PC1", "PC2", "PC3", "PC4"),
                test = c("firth", "glm", "scoreSPA"),
                name = "example",
                minCarriers = 1)

# apply variant filters
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("firth", "skat_robust", "acatv"),
                 name = "example", 
                 maxMAF = 0.05,
                 minCarriers = 1,
                 minCallrateVar = 0.9,
                 minCallrateSM = 0.95)

# Perform MAF-weighted burden tests (madsen-browning)
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("firth", "skat_robust", "acatv"),
                 MAFweights = "mb")

# CADD-weighted burden test
varsetlist_cadd <- getVarSet(varsetfile, unit = c("SOD1", "NEK1"), varSetName = "CADD")
rvb <- assocTest(gdb,
                 varSet = varsetlist_cadd,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("firth", "skat_robust", "acatv"))

# Perform recessive burden test
rvb <- assocTest(gdb,
                 varSet = varsetlist,
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("firth", "skat_robust", "acatv"),
                 geneticModel = "recessive")

# Resampled burden test 
rvb <- assocTest(gdb,
                 varSet = varsetlist[1],
                 cohort = "phenosmall",
                 pheno = "pheno",
                 covar = c("PC1", "PC2", "PC3", "PC4"),
                 test = c("skat", "skat_burden", "acatv"),
                 name = "example",
                 methodResampling = "permutation",
                 nResampling = 100)


}
