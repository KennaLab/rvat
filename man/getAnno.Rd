% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allGenerics.R, R/gdb.R
\name{getAnno}
\alias{getAnno}
\alias{getAnno,gdb-method}
\title{Get an annotation table from a gdb}
\usage{
getAnno(
  object,
  table,
  fields = "*",
  left = c(),
  inner = c(),
  VAR_id = NULL,
  ranges = NULL,
  padding = 250,
  where = c()
)
}
\arguments{
\item{object}{an object of class \code{\link[=gdb-class]{gdb}}}

\item{table}{base table to query}

\item{fields}{columns to retain}

\item{left}{left join operations to perform}

\item{inner}{inner join operations to perform}

\item{VAR_id}{retain only variants with matching ID}

\item{ranges}{Extract variants within specified ranges.
Ranges can be specified as a data.frame, including at least 'CHROM','start', and 'end' columns, or
can be a \code{\link[GenomicRanges:GRanges-class]{GenomicRanges::GRanges}} object.}

\item{padding}{Number of basepairs to extend the search region beyond the specified genomic ranges to capture variants where the reference allele (REF) overlaps the input ranges,
but the POS of the variant falls outside the ranges. This accounts for variants where the REF allele spans multiple base pairs.}

\item{where}{An SQL compliant where clause to filter output; eg: "CHROM=2 AND POS between 5000 AND 50000 AND AF<0.01 AND (cadd.caddPhred>15 OR snpEff.SIFT='D')".}
}
\description{
Get an annotation table from a \code{\link[=gdb-class]{gdb}} object.
}
\examples{

library(rvatData)
gdb <- create_example_gdb()

# retrieve full anno table
varinfo <- getAnno(gdb, table = "varInfo")
head(varinfo)

# extract a genomic range
varinfo <- getAnno(gdb, 
                   table = "varInfo", 
                   ranges = data.frame(CHROM = "chr1", start = 11013847, end = 11016874))
head(varinfo)

# keep only specified fields
varinfo <- getAnno(gdb, 
                   table = "varInfo", 
                   fields = c("VAR_id", "CHROM", "POS", "REF", "ALT", "ModerateImpact"),
                   ranges = data.frame(CHROM = "chr1", start = 11013847, end = 11016874))
head(varinfo)

# the `where` parameter can be used to to pass an SQL-compliant where clause t
varinfo <- getAnno(gdb, 
                   table = "varInfo", 
                   where = "gene_name = 'SOD1' and ModerateImpact = 1")
head(varinfo)


# the `inner` and `left` parameters can be used to perform inner and left join operations respectively
# e.g. we can use the `inner` parameter to filter e.g. based on a table containing QC-passing variants
# for example:
uploadAnno(gdb, name = "QCpass", value = data.frame(VAR_id = 1:100), skipRemap = TRUE, verbose = FALSE)
varinfo <- getAnno(gdb, 
                   inner = "QCpass",
                   table = "varInfo")

}
